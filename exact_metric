import json
from datasets import load_dataset

def exact_match(prediction: str, ground_truth: str) -> bool:
    """
    Compare the predicted response with the ground truth response.
    
    Args:
    - prediction (str): The model's predicted response as a JSON string.
    - ground_truth (str): The expected response as a JSON string.
    
    Returns:
    - bool: True if the responses match exactly, False otherwise.
    """
    pred_actions = json.loads(prediction).get("actions", [])
    gt_actions = json.loads(ground_truth).get("actions", [])
    
    return pred_actions == gt_actions

def evaluate_dataset(dataset) -> float:
    """
    Evaluate the exact match metric on a dataset.
    
    Args:
    - dataset: A Hugging Face dataset containing 'input' and 'response' columns.
    
    Returns:
    - float: The exact match accuracy.
    """
    correct_predictions = 0
    total_predictions = len(dataset)
    
    for data in dataset:
        input_text = data['input']
        ground_truth = data['response']
        
        # Assume inferrence is a function that takes input_text and returns the model's prediction
        prediction = inferrence(input_text)
        
        if exact_match(prediction, ground_truth):
            correct_predictions += 1
    
    return correct_predictions / total_predictions

# Load the validation dataset from Hugging Face
dataset = load_dataset("your_dataset_name", split="validation")

# Evaluate the dataset
accuracy = evaluate_dataset(dataset)
print(f"Exact match accuracy: {accuracy * 100:.2f}%")
